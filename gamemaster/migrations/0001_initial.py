# Generated by Django 3.1.2 on 2020-10-08 16:27

import django.db.models.deletion
import model_utils.fields
import picklefield.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('game', picklefield.fields.PickledObjectField(blank=True, editable=False, null=True)),
                ('restart_timeout', models.FloatField(default=5)),
                ('updated_on', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SequentialRoom',
            fields=[
                ('room_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='gamemaster.room')),
                ('player_timeout', models.FloatField(default=30)),
                ('nature_timeout', models.FloatField(default=1)),
            ],
            bases=('gamemaster.room',),
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', model_utils.fields.StatusField(blank=True, choices=[('Online', 'Online'), ('Away', 'Away'),
                                                                               ('Offline', 'Offline')], default=None,
                                                          max_length=100, no_check_for_status=True, null=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seats',
                                           to='gamemaster.room')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                           related_name='seats', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PokerRoom',
            fields=[
                ('sequentialroom_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='gamemaster.sequentialroom')),
                ('num_seats', models.PositiveIntegerField(choices=[(6, 'Six Max'), (9, 'Nine Max')])),
                ('ante', models.PositiveIntegerField(default=0)),
                ('small_blind', models.PositiveIntegerField(default=1)),
                ('big_blind', models.PositiveIntegerField(default=2)),
                ('starting_stack', models.PositiveIntegerField(default=200)),
            ],
            bases=('gamemaster.sequentialroom',),
        ),
        migrations.CreateModel(
            name='TicTacToeRoom',
            fields=[
                ('sequentialroom_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='gamemaster.sequentialroom')),
            ],
            options={
                'verbose_name': 'Tic Tac Toe Room',
            },
            bases=('gamemaster.sequentialroom',),
        ),
        migrations.CreateModel(
            name='NLHERoom',
            fields=[
                ('pokerroom_ptr',
                 models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True,
                                      primary_key=True, serialize=False, to='gamemaster.pokerroom')),
            ],
            options={
                'verbose_name': "No Limit Texas Hold'em Room",
            },
            bases=('gamemaster.pokerroom',),
        ),
    ]
